datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Preference {
  id                           String   @id
  isPride                      Boolean  @default(false)
  highSignalNotificationFilter Boolean  @default(false)
  createdAt                    DateTime @default(now())
}

model MembershipNft {
  id                String   @id
  dismissedOrMinted Boolean  @default(false)
  createdAt         DateTime @default(now())
}

model Feature {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key       String      @unique
  priority  Int         @default(0)
  type      FeatureType @default(FEATURE)
  enabled   Boolean     @default(true)
  createdAt DateTime    @default(now())

  // Relations
  profiles ProfileFeature[]

  // Indexes
  @@index([priority])
  @@index([type])
}

enum FeatureType {
  FEATURE
  PERMISSION
  COHORT
  MODE
}

model ProfileFeature {
  profileId String
  featureId String   @db.Uuid
  feature   Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())

  @@id([profileId, featureId])
  // Indexes
  @@index([profileId, featureId])
}

model Poll {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime  @default(now())
  endsAt    DateTime?

  // Relations
  options PollOption[]
}

model PollOption {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pollId String @db.Uuid
  option String
  index  Int    @default(0)

  // Relations
  poll      Poll           @relation(fields: [pollId], references: [id], onDelete: Cascade)
  responses PollResponse[]

  // Indexes
  @@index([pollId])
}

model PollResponse {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId String
  optionId  String   @db.Uuid
  createdAt DateTime @default(now())

  // Relations
  option PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([profileId, optionId])
  // Indexes
  @@index([optionId])
}

model AllowedToken {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  symbol          String
  decimals        Int      @default(18)
  contractAddress String   @unique
  priority        Int      @default(0)
  createdAt       DateTime @default(now())

  // Indexes
  @@index([priority])
}
