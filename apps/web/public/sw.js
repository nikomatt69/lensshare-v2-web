var u=process.env.LATEST_GIT_COMMIT_SHA,c=class{constructor({cachePrefix:e,staticAssets:t,cacheableRoutes:a,withQueryParams:i}){this.cacheStaticAsset=(e,t)=>{fetch(e).then(a=>{if([200,304].includes(a.status))t.put(e,a).catch(i=>{console.debug(`Failed to cache file - ${e}`,i),console.debug(`Failed to cache file - ${e}`,i)});else throw new Error("Failed to fetch from local")}).catch(console.debug)};this.cacheStaticAssets=async()=>{let e=await caches.open(this.cacheName);for(let t of this.staticAssets)this.cacheStaticAsset(t,e)};this.invalidatePreviousCache=async()=>{let e=await caches.keys();await Promise.all(e.filter(t=>t.startsWith(this.cachePrefix)).map(async t=>t!==this.cacheName?await caches.delete(t):await Promise.resolve(!1)))};this.put=async(e,t)=>{let a=await fetch(e,{cache:"reload"});!a.redirected&&[200,304].includes(a.status)?await t.put(e,a):await t.delete(e)};this.get=async e=>{let{request:t}=e,{pathname:a,search:i}=new URL(t.url),h=`${a}${this.withQueryParams?i:""}`;if((this.staticAssets.has(a)||this.cacheableRoutes.has(a))&&this.cacheName){let l=await caches.open(this.cacheName),d=await l.match(h);if(navigator.onLine&&e.waitUntil(this.put(h,l)),d)return d}return await fetch(t)};this.cachePrefix=e,this.cacheName=`${e}_${u}`,this.staticAssets=new Set(t),this.cacheableRoutes=new Set(a),this.withQueryParams=i??!0}};importScripts("https://progressier.app/UyYlhOtlyHyST7enRwK8/sw.js");var f="https://api.lenshareapp.xyz/leafwatch/impressions",w=5e3,n=null,o=new Set,g=()=>{let s=Array.from(o);s.length>0&&n&&(o.clear(),fetch(f,{body:JSON.stringify({ids:s,viewer_id:n}),headers:{"Content-Type":"application/json"},keepalive:!0,method:"POST"}).then(()=>{}).catch(()=>{}))};setInterval(g,w);var S=process.env.STATIC_ASSETS??[],y=["/","/contact","/explore"],p=["https://static-asset.lenshareapp.xyz","https://asset.lenshareapp.xyz","https://prerender.lenshareapp.xyz"],r=new c({cachePrefix:"SWCache",cacheableRoutes:[...y,...p],staticAssets:S});async function v(){self.skipWaiting(),await r.cacheStaticAssets()}var m=async()=>{await self.clients.claim(),await r.invalidatePreviousCache()},A=s=>{let e=s.request.clone(),{origin:t}=new URL(e.url);(self.location.origin===t||p.includes(t))&&s.respondWith(r.get(s))};self.addEventListener("message",s=>{s.data&&s.data.type==="PUBLICATION_VISIBLE"&&(o.add(s.data.id),n=s.data.viewerId)});self.addEventListener("fetch",A);self.addEventListener("install",s=>s.waitUntil(v()));self.addEventListener("activate",s=>s.waitUntil(m()));self.addEventListener("push",function(s){s.waitUntil(self.registration.showNotification("LensShare",{lang:"en",body:"New Notification",icon:"/images/icon.png",vibrate:[500,100,500]}))});
